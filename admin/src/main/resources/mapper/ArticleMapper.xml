<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.vincent.admin.mapper.ArticleMapper">


    <!-- 通用查询映射结果 -->
    <resultMap id="BaseResultMap" type="com.vincent.admin.entity.Article">
        <id column="uid" property="uid"/>
        <result column="title" property="title"/>
        <result column="link" property="link"/>
        <result column="lang" property="lang"/>
        <result column="summary" property="summary"/>
        <result column="content" property="content"/>
        <result column="content_md" property="contentMd"/>
        <result column="tag_uid" property="tagUid"/>
        <result column="category_uid" property="categoryUid"/>
        <result column="comment_count" property="commentCount"/>
        <result column="liked_count" property="likedCount"/>
        <result column="view_count" property="viewCount"/>
        <result column="cover_uid" property="coverUid"/>
        <result column="enable_comment" property="enableComment"/>
        <result column="is_draft" property="isDraft"/>
        <result column="is_original" property="isOriginal"/>
        <result column="author" property="author"/>
        <result column="article_source" property="articleSource"/>
        <result column="status" property="status"/>
        <result column="level" property="level"/>
        <result column="sort" property="sort"/>
        <result column="type" property="type"/>
        <result column="outside_link" property="outsideLink"/>
        <result column="create_time" property="createTime"/>
        <result column="update_time" property="updateTime"/>

        <result column="url" property="coverUrl"/>
        <result column="js_delivr_url" property="coverJsDelivrUrl"/>
        <result column="name" property="category"/>
    </resultMap>
    <!--
MySQL 表关联的算法是 Nest Loop Join，是通过驱动表的结果集作为循环基础数据，然后一条一条地通过该结果集中的数据作为过滤条件到下一个表中查询数据，然后合并结果。

//例: user表10000条数据，class表20条数据
select * from user u left join class c u.userid=c.userid

上面sql的后果就是需要用user表循环10000次才能查询出来，而如果用class表驱动user表则只需要循环20次就能查询出来。
4. 该如如何优化？

优化的目标是尽可能减少JOIN中Nested Loop的循环次数，以此保证：永远用小结果集驱动大结果集。

排序的字段也有影响，有条原则：对驱动表可以直接排序，对非驱动表（的字段排序）需要对循环查询的合并结果（临时表）进行排序！
    -->
    <select id="getBlogByLink" resultMap="BaseResultMap">
        select a.uid,a.title,a.link,a.content_md,a.tag_uid,a.create_time,a.update_time,a.level,a.enable_comment,a.view_count,a.comment_count,a.liked_count,a.author,f.url,f.js_delivr_url from
        (select * from s_blog b where b.is_draft = 0 and b.link = #{link}) a
        left join s_file f on a.cover_uid = f.uid
        order by a.create_time desc
    </select>

    <select id="getBlogByPageWithCover" resultMap="BaseResultMap">
        select a.uid,a.title,a.link,a.summary,a.tag_uid,a.create_time,a.update_time,a.level,a.enable_comment,a.liked_count,a.comment_count,f.url, f.js_delivr_url from
        (select * from s_blog b where b.is_draft = #{isDraft}
        <if test="categoryUid != 0"> and b.category_uid = #{categoryUid} </if>) a
        left join s_file f on a.cover_uid = f.uid
        order by a.create_time desc
    </select>

    <select id="getTopBlogWithCover" resultMap="BaseResultMap">
        select a.uid,a.title,a.link,a.create_time,a.update_time,a.level, f.url, f.js_delivr_url from (
        (select max(update_time) update_time, level from s_blog where level>0 and is_draft=0 group by level) b
        inner join s_blog a on a.level = b.level and a.update_time = b.update_time)
        left join s_file f on a.cover_uid = f.uid
    </select>

    <select id="getBlogByPageWithoutTags" resultMap="BaseResultMap">
        select a.uid,a.title,a.link,a.summary,a.tag_uid,a.create_time,a.update_time,a.level,a.enable_comment,a.liked_count,a.comment_count,a.url,a.js_delivr_url,c.name from s_category c inner join
        (select b.*,f.url, f.js_delivr_url from
            (select * from s_blog d where d.is_draft = #{isDraft}
                <if test="categoryUid != 0"> and d.category_uid = #{categoryUid} </if>) b
        left join s_file f on b.cover_uid = f.uid) a
        on c.uid = a.category_uid order by a.create_time desc
    </select>

    <select id="searchArticle" resultMap="BaseResultMap">
        <!--where username LIKE concat(concat('%',#{username}),'%')-->
        <bind name="pattern" value="'%' + keyword + '%'" />
        select a.uid,a.title,a.link,a.summary,a.create_time,a.update_time,a.liked_count,a.comment_count,f.url, f.js_delivr_url from
        (select * from s_blog b where
        b.is_draft = false and b.title like #{pattern} or b.content like #{pattern}) a
        left join s_file f on a.cover_uid = f.uid order by a.view_count desc
    </select>
    <!-- 通用查询结果列

     //建立sql片段
    <sql id="query_user_where">
        <if test="id!=null and id!=''">
            and id=#{id}
        </if>
        <if test="username!=null and username!=''">
            and username like '%${username}%'
        </if>
    </sql>

    //使用include引用sql片段
    <select id="findUserList" parameterType="user" resultType="user">
        select * from user
            <where>
                <include refid="query_user_where"/>
            </where>
    </select>

     -->
    <!--
    <sql id="Base_Column_List">
        oid, uid, title, summary, content, taguid, clickcount, collectcount, photo, status, createtime, updatetime
    </sql>
    -->

</mapper>
